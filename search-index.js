var searchIndex = {};
searchIndex["smithay"] = {"doc":"Smithay: the wayland compositor smithy","items":[[0,"backend","smithay","Backend (rendering/input) creation helpers",null,null],[0,"input","smithay::backend","Common traits for input backends to receive input from.",null,null],[3,"Seat","smithay::backend::input","A seat describes a group of input devices and at least one graphics device belonging together.",null,null],[3,"SeatCapabilities","","Describes capabilities a `Seat` has.",null,null],[12,"pointer","","`Seat` has a pointer",0,null],[12,"keyboard","","`Seat` has a keyboard",0,null],[12,"touch","","`Seat` has a touchscreen",0,null],[3,"TouchSlot","","Slot of a different touch event.",null,null],[4,"UnusedEvent","","Used to mark events never emitted by an `InputBackend` implementation.",null,null],[4,"KeyState","","State of key on a keyboard. Either pressed or released",null,null],[13,"Released","","Key is released",1,null],[13,"Pressed","","Key is pressed",1,null],[4,"MouseButton","","A particular mouse button",null,null],[13,"Left","","Left mouse button",2,null],[13,"Middle","","Middle mouse button",2,null],[13,"Right","","Right mouse button",2,null],[13,"Other","","Other mouse button with index",2,null],[4,"MouseButtonState","","State of a button on a mouse. Either pressed or released",null,null],[13,"Released","","Button is released",3,null],[13,"Pressed","","Button is pressed",3,null],[4,"Axis","","Axis when scrolling",null,null],[13,"Vertical","","Vertical axis",4,null],[13,"Horizontal","","Horizonal axis",4,null],[4,"AxisSource","","Source of an axis when scrolling",null,null],[13,"Finger","","Finger. Mostly used for trackpads.",5,null],[13,"Continuous","","Continous scrolling device. Almost identical to `Finger`",5,null],[13,"Wheel","","Scroll wheel.",5,null],[13,"WheelTilt","","Scrolling through tilting the scroll wheel.",5,null],[8,"Event","","Trait for generic functions every input event does provide/",null,null],[10,"time","","Returns an upward counting variable useful for event ordering.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"KeyboardKeyEvent","","Trait for keyboard event",null,null],[10,"key_code","","Code of the pressed key. See linux/input-event-codes.h",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"state","","State of the key",7,{"inputs":[{"name":"self"}],"output":{"name":"keystate"}}],[10,"count","","Total number of keys pressed on all devices on the associated `Seat`",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"PointerButtonEvent","","Common methods pointer event generated by pressed buttons do implement",null,null],[10,"button","","Pressed button of the event",8,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[10,"state","","State of the button",8,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonstate"}}],[8,"PointerAxisEvent","","Trait for pointer events generated by scrolling on an axis.",null,null],[10,"axis","","`Axis` this event was generated for.",9,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[10,"source","","Source of the scroll event. Important for interpretation of `amount`.",9,{"inputs":[{"name":"self"}],"output":{"name":"axissource"}}],[10,"amount","","Amount of scrolling on the given `Axis`. See `source` for interpretation.",9,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[8,"PointerMotionEvent","","Trait for pointer events generated by relative device movement.",null,null],[11,"delta","","Delta between the last and new pointer device position interpreted as pixel movement",10,null],[10,"delta_x","","Delta on the x axis between the last and new pointer device position interpreted as pixel movement",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"delta_y","","Delta on the y axis between the last and new pointer device position interpreted as pixel movement",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"PointerMotionAbsoluteEvent","","Trait for pointer events generated by absolute device positioning.",null,null],[11,"position","","Device position in it's original coordinate space.",11,null],[10,"x","","Device x position in it's original coordinate space.",11,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"y","","Device y position in it's original coordinate space.",11,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"position_transformed","","Device position converted to the targets coordinate space. E.g. the focused output's resolution.",11,null],[10,"x_transformed","","Device x position converted to the targets coordinate space's width. E.g. the focused output's width.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[10,"y_transformed","","Device y position converted to the targets coordinate space's height. E.g. the focused output's height.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[8,"TouchDownEvent","","Trait for touch events starting at a given position.",null,null],[10,"slot","","`TouchSlot`, if the device has multi-touch capabilities",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"position","","Touch position in the device's native coordinate space",12,null],[11,"position_transformed","","Touch position converted into the target coordinate space. E.g. the focused output's resolution.",12,null],[10,"x","","Touch event's x-coordinate in the device's native coordinate space",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"y","","Touch event's x-coordinate in the device's native coordinate space",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"x_transformed","","Touch event's x position converted to the targets coordinate space's width. E.g. the focused output's width.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[10,"y_transformed","","Touch event's y position converted to the targets coordinate space's width. E.g. the focused output's width.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[8,"TouchMotionEvent","","Trait for touch events regarding movement on the screen",null,null],[10,"slot","","`TouchSlot`, if the device has multi-touch capabilities",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"position","","Touch position in the device's native coordinate space",13,null],[11,"position_transformed","","Touch position converted into the target coordinate space. E.g. the focused output's resolution.",13,null],[10,"x","","Touch event's x-coordinate in the device's native coordinate space",13,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"y","","Touch event's x-coordinate in the device's native coordinate space",13,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"x_transformed","","Touch event's x position converted to the targets coordinate space's width. E.g. the focused output's width.",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[10,"y_transformed","","Touch event's y position converted to the targets coordinate space's width. E.g. the focused output's width.",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[8,"TouchUpEvent","","Trait for touch events finishing.",null,null],[10,"slot","","`TouchSlot`, if the device has multi-touch capabilities",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"TouchCancelEvent","","Trait for touch events cancelling the chain",null,null],[10,"slot","","`TouchSlot`, if the device has multi-touch capabilities",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"TouchFrameEvent","","Trait for touch frame events",null,null],[8,"InputBackend","","Trait that describes objects providing a source of input events. All input backends need to implemenent this and provide the same base gurantees about the presicion of given events.",null,null],[16,"InputConfig","","Type of input device associated with the backend",16,null],[16,"EventError","","Type representing errors that may be returned when processing events",16,null],[16,"KeyboardKeyEvent","","Type representing keyboard events",16,null],[16,"PointerAxisEvent","","Type representing axis events on pointer devices",16,null],[16,"PointerButtonEvent","","Type representing button events on pointer devices",16,null],[16,"PointerMotionEvent","","Type representing motion events of pointer devices",16,null],[16,"PointerMotionAbsoluteEvent","","Type representing motion events of pointer devices",16,null],[16,"TouchDownEvent","","Type representing touch events starting",16,null],[16,"TouchUpEvent","","Type representing touch events ending",16,null],[16,"TouchMotionEvent","","Type representing touch events from moving",16,null],[16,"TouchCancelEvent","","Type representing cancelling of touch events",16,null],[16,"TouchFrameEvent","","Type representing touch frame events",16,null],[10,"set_handler","","Sets a new handler for this `InputBackend`",16,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[10,"get_handler","","Get a reference to the currently set handler, if any",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"clear_handler","","Clears the currently handler, if one is set",16,{"inputs":[{"name":"self"}],"output":null}],[10,"input_config","","Get current `InputConfig`",16,null],[10,"dispatch_new_events","","Processes new events of the underlying backend and drives the `InputHandler`.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"InputHandler","","Implement to receive input events from any `InputBackend`.",null,null],[10,"on_seat_created","","Called when a new `Seat` has been created",17,{"inputs":[{"name":"self"},{"name":"seat"}],"output":null}],[10,"on_seat_destroyed","","Called when an existing `Seat` has been destroyed.",17,{"inputs":[{"name":"self"},{"name":"seat"}],"output":null}],[10,"on_seat_changed","","Called when a `Seat`'s properties have changed.",17,{"inputs":[{"name":"self"},{"name":"seat"}],"output":null}],[10,"on_keyboard_key","","Called when a new keyboard event was received.",17,null],[10,"on_pointer_move","","Called when a new pointer movement event was received.",17,null],[10,"on_pointer_move_absolute","","Called when a new pointer absolute movement event was received.",17,null],[10,"on_pointer_button","","Called when a new pointer button event was received.",17,null],[10,"on_pointer_axis","","Called when a new pointer scroll event was received.",17,null],[10,"on_touch_down","","Called when a new touch down event was received.",17,null],[10,"on_touch_motion","","Called when a new touch motion event was received.",17,null],[10,"on_touch_up","","Called when a new touch up event was received.",17,null],[10,"on_touch_cancel","","Called when a new touch cancel event was received.",17,null],[10,"on_touch_frame","","Called when a new touch frame event was received.",17,null],[10,"on_input_config_changed","","Called when the `InputConfig` was changed through an external event.",17,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"seat"}}],[11,"capabilities","","Get the currently capabilities of this `Seat`",18,{"inputs":[{"name":"self"}],"output":{"name":"seatcapabilities"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"seat"}],"output":{"name":"bool"}}],[11,"hash","","",18,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"seatcapabilities"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"seatcapabilities"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"time","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"keystate"}}],[11,"key_code","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"state","","",19,{"inputs":[{"name":"self"}],"output":{"name":"keystate"}}],[11,"count","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"mousebuttonstate"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonstate"}}],[11,"button","","",19,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"state","","",19,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonstate"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"axissource"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"axissource"}}],[11,"axis","","",19,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"source","","",19,{"inputs":[{"name":"self"}],"output":{"name":"axissource"}}],[11,"amount","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"delta_x","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"delta_y","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"x","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"y","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"x_transformed","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"y_transformed","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"touchslot"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"touchslot"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"touchslot"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"slot","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"x","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"y","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"x_transformed","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"y_transformed","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"slot","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"x","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"y","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"x_transformed","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"y_transformed","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"slot","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slot","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"graphics","smithay::backend","Common traits for various ways to renderer on a given graphics backend.",null,null],[0,"software","smithay::backend::graphics","Common traits and types used for software rendering on graphics backends",null,null],[8,"CpuGraphicsBackend","smithay::backend::graphics::software","Trait that describes objects providing a software rendering implementation",null,null],[10,"render","","Render a given buffer of a given format at a specified place in the framebuffer",21,null],[10,"get_framebuffer_dimensions","","Returns the dimensions of the Framebuffer",21,null],[0,"egl","smithay::backend::graphics","Common traits and types for egl context creation and rendering",null,null],[3,"Error","smithay::backend::graphics::egl","The Error type.",null,null],[12,"0","","The kind of the error.",22,null],[3,"EGLContext","","EGL context for rendering",null,null],[3,"EGLSurface","","EGL surface of a given egl context for rendering",null,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"version","","Describes the OpenGL API and version that are being requested when a context is created.",23,null],[12,"profile","","OpenGL profile to use",23,null],[12,"debug","","Whether to enable the debug flag of the context.",23,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling swap_buffers will block until the screen refreshes. This is typically used to prevent screen tearing.",23,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If `true`, only hardware-accelerated formats will be conisdered. If `false`, only software renderers. `None` means \"don't care\". Default is `None`.",24,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. None means \"don't care\". The default is `None``.",24,null],[12,"float_color_buffer","","If `true`, the color buffer must be in a floating point format. Default is `false`.",24,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\". The default is `None`.",24,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `None`.",24,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `None`.",24,null],[12,"double_buffer","","If `true`, only double-buffered formats will be considered. If `false`, only single-buffer formats. `None` means \"don't care\". The default is `None`.",24,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers. `None` means \"don't care\". Default is `None`. A value of `Some(0)` indicates that multisampling must not be enabled.",24,null],[12,"stereoscopy","","If `true`, only stereoscopic formats will be considered. If `false`, only non-stereoscopic formats. The default is `false`.",24,null],[3,"PixelFormat","","Describes the pixel format of the main framebuffer",null,null],[12,"hardware_accelerated","","is the format hardware accelerated",25,null],[12,"color_bits","","number of bits used for colors",25,null],[12,"alpha_bits","","number of bits used for alpha channel",25,null],[12,"depth_bits","","number of bits used for depth channel",25,null],[12,"stencil_bits","","number of bits used for stencil buffer",25,null],[12,"stereoscopy","","is stereoscopy enabled",25,null],[12,"double_buffer","","is double buffering enabled",25,null],[12,"multisampling","","number of samples used for multisampling if enabled",25,null],[12,"srgb","","is srgb enabled",25,null],[4,"NativeSurfacePtr","","Native types to create an `EGLSurface` from. Currently supported providers are X11, Wayland and GBM.",null,null],[13,"X11","","X11 Window to create an `EGLSurface` upon.",26,null],[13,"Wayland","","Wayland Surface to create an `EGLSurface` upon.",26,null],[13,"Gbm","","GBM Surface",26,null],[4,"NativeType","","Enumerates all supported backends",null,null],[13,"X11","","X11 window & surface",27,null],[13,"Wayland","","Wayland surface",27,null],[13,"Gbm","","Gbm surface",27,null],[13,"Unknown","","Unknown",27,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",28,null],[13,"OpenGlVersionNotSupported","","The requested OpenGL version is not supported",28,null],[13,"OpenGlesNotSupported","","The EGL implementation does not support creating OpenGL ES contexts",28,null],[13,"NoAvailablePixelFormat","","No available pixel format matched the criteria",28,null],[13,"NonMatchingSurfaceType","","Surface type does not match the context type",28,null],[13,"NotSupported","","Context creation is not supported on the current window system",28,null],[13,"LoadingEGLFailed","","Loading libEGL failed",28,null],[13,"DisplayNotSupported","","EGL was unable to optain a valid EGL Display",28,null],[13,"InitFailed","","eglInitialize returned an error",28,null],[13,"ConfigFailed","","Failed to configure the EGL context",28,null],[13,"CreationFailed","","Context creation failed as one or more requirements could not be met. Try removing some gl attributes or pixel format requirements",28,null],[13,"SurfaceCreationFailed","","eglCreateWindowSurface failed",28,null],[13,"Unknown","","The reason of failure could not be determined",28,null],[4,"SwapBuffersError","","Error that can happen when swapping buffers.",null,null],[13,"ContextLost","","The OpenGL context has been lost and needs to be recreated.",29,null],[13,"AlreadySwapped","","The buffers have already been swapped.",29,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",30,null],[13,"Core","","Include all the future-compatible functions and definitions.",30,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"NativeSurface","","Trait for supported types returning valid surface pointers for initializing egl",null,null],[16,"Keep","","Type to keep the surface valid, if needed",32,null],[10,"surface","","Return a surface for the given type if possible",32,{"inputs":[{"name":"self"},{"name":"nativetype"}],"output":{"name":"result"}}],[8,"EGLGraphicsBackend","","Trait that describes objects that have an OpenGl context and can be used to render upon",null,null],[10,"swap_buffers","","Swaps buffers at the end of a frame.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",33,null],[10,"get_framebuffer_dimensions","","Returns the dimensions of the window, or screen, etc in points.",33,null],[10,"is_current","","Returns true if the OpenGL context is the current one in the thread.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"make_current","","Makes the OpenGL context the current context in the current thread.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",33,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"nativesurfaceptr"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"nativetype"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"nativetype"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",22,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",22,null],[11,"with_chain","","",22,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",22,null],[11,"iter","","",22,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",22,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",22,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",22,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",22,{"inputs":[{"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",22,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",22,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",22,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",22,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",22,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",22,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",28,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",28,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",28,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",22,{"inputs":[{"name":"trynewerror"}],"output":{"name":"error"}}],[11,"new_from_winit","","Create a new context from a given `winit`-`Window`",34,{"inputs":[{"name":"winitwindow"},{"name":"glattributes"},{"name":"pixelformatrequirements"},{"name":"l"}],"output":{"name":"result"}}],[11,"new_from_gbm","","Create a new context from a given `gbm::Device`",34,{"inputs":[{"name":"gbmdevice"},{"name":"glattributes"},{"name":"pixelformatrequirements"},{"name":"l"}],"output":{"name":"result"}}],[11,"create_surface","","Creates a surface bound to the given egl context for rendering",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",34,null],[11,"is_current","","Returns true if the OpenGL context is the current one in the thread.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",34,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"swap_buffers","","Swaps buffers at the end of a frame.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"make_current","","Makes the OpenGL context the current context in the current thread.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"swapbufferserror"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"glattributes"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"glattributes"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"glattributes"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"glprofile"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatrequirements"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pixelformatrequirements"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pixelformatrequirements"}],"output":{"name":"bool"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"pixelformatrequirements"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"bool"}}],[0,"glium","smithay::backend::graphics","Glium compatibility module",null,null],[3,"GliumGraphicsBackend","smithay::backend::graphics::glium","Wrapper to expose `glium` compatibility",null,null],[11,"draw","","Start drawing on the backbuffer.",36,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"borrow","","",36,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_context","","",36,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"from","","",36,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"GraphicsBackend","smithay::backend::graphics","General functions any graphics backend should support independently from it's rendering techique.",null,null],[16,"CursorFormat","","Format representing the image drawn for the cursor.",37,null],[16,"Error","","Error the underlying backend throws if operations fail",37,null],[10,"set_cursor_position","","Sets the cursor position and therefor updates the drawn cursors position. Useful as well for e.g. pointer wrapping.",37,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_cursor_representation","","Set the cursor drawn on the `GraphicsBackend`.",37,null],[0,"winit","smithay::backend","Implementation of backend traits for types provided by `winit`",null,null],[3,"Error","smithay::backend::winit","The Error type.",null,null],[12,"0","","The kind of the error.",38,null],[3,"WinitGraphicsBackend","","Window with an active EGL Context created by `winit`. Implements the `EGLGraphicsBackend` graphics backend trait",null,null],[3,"WinitInputBackend","","Abstracted event loop of a `winit` `Window` implementing the `InputBackend` trait",null,null],[3,"WinitKeyboardInputEvent","","Winit-Backend internal event wrapping winit's types into a `KeyboardKeyEvent`",null,null],[3,"WinitMouseMovedEvent","","Winit-Backend internal event wrapping winit's types into a `PointerMotionAbsoluteEvent`",null,null],[3,"WinitMouseWheelEvent","","Winit-Backend internal event wrapping winit's types into a `PointerAxisEvent`",null,null],[3,"WinitMouseInputEvent","","Winit-Backend internal event wrapping winit's types into a `PointerButtonEvent`",null,null],[3,"WinitTouchStartedEvent","","Winit-Backend internal event wrapping winit's types into a `TouchDownEvent`",null,null],[3,"WinitTouchMovedEvent","","Winit-Backend internal event wrapping winit's types into a `TouchMotionEvent`",null,null],[3,"WinitTouchEndedEvent","","Winit-Backend internal event wrapping winit's types into a `TouchUpEvent`",null,null],[3,"WinitTouchCancelledEvent","","Winit-Backend internal event wrapping winit's types into a `TouchCancelEvent`",null,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",39,null],[13,"EGL","","EGL error",39,null],[13,"InitFailed","","Failed to initialize a window",39,null],[4,"WinitInputError","","Errors that may happen when driving the event loop of `WinitInputBackend`",null,null],[13,"WindowClosed","","The underlying `winit` `Window` was closed. No further events can be processed.",40,null],[5,"init","","Create a new `WinitGraphicsBackend`, which implements the `EGLGraphicsBackend` graphics backend trait and a corresponding `WinitInputBackend`, which implements the `InputBackend` trait",null,{"inputs":[{"name":"l"}],"output":{"name":"result"}}],[5,"init_from_builder","","Create a new `WinitGraphicsBackend`, which implements the `EGLGraphicsBackend` graphics backend trait, from a given `WindowBuilder` struct and a corresponding `WinitInputBackend`, which implements the `InputBackend` trait",null,{"inputs":[{"name":"windowbuilder"},{"name":"l"}],"output":{"name":"result"}}],[5,"init_from_builder_with_gl_attr","","Create a new `WinitGraphicsBackend`, which implements the `EGLGraphicsBackend` graphics backend trait, from a given `WindowBuilder` struct, as well as given `GlAttributes` for further customization of the rendering pipeline and a corresponding `WinitInputBackend`, which implements the `InputBackend` trait.",null,{"inputs":[{"name":"windowbuilder"},{"name":"glattributes"},{"name":"l"}],"output":{"name":"result"}}],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",41,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",38,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",38,null],[11,"with_chain","","",38,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",38,null],[11,"iter","","",38,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",38,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",38,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",38,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",38,{"inputs":[{"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",38,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",38,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",38,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",38,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",38,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",38,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",39,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",39,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",38,{"inputs":[{"name":"trynewerror"}],"output":{"name":"error"}}],[11,"set_cursor_position","","",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_cursor_representation","","",42,null],[11,"swap_buffers","","",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_proc_address","","",42,null],[11,"get_framebuffer_dimensions","","",42,null],[11,"is_current","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"make_current","","",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_pixel_format","","",42,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"winitinputerror"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"winitinputerror"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"description","","",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"winitkeyboardinputevent"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"winitkeyboardinputevent"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"winitkeyboardinputevent"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"time","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"key_code","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"state","","",43,{"inputs":[{"name":"self"}],"output":{"name":"keystate"}}],[11,"count","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"winitmousemovedevent"}}],[11,"time","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"x","","",44,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"y","","",44,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"x_transformed","","",44,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"y_transformed","","",44,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"winitmousewheelevent"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"winitmousewheelevent"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"winitmousewheelevent"}],"output":{"name":"bool"}}],[11,"time","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"axis","","",45,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"source","","",45,{"inputs":[{"name":"self"}],"output":{"name":"axissource"}}],[11,"amount","","",45,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"winitmouseinputevent"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"winitmouseinputevent"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"winitmouseinputevent"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"time","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"button","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"state","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonstate"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"winittouchstartedevent"}}],[11,"time","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"slot","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"x","","",47,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"y","","",47,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"x_transformed","","",47,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"y_transformed","","",47,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"winittouchmovedevent"}}],[11,"time","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"slot","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"x","","",48,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"y","","",48,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"x_transformed","","",48,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"y_transformed","","",48,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"winittouchendedevent"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"winittouchendedevent"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"winittouchendedevent"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"time","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"slot","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"winittouchcancelledevent"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"winittouchcancelledevent"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"winittouchcancelledevent"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"time","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"slot","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_handler","","",51,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"get_handler","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear_handler","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"input_config","","",51,null],[11,"dispatch_new_events","","Processes new events of the underlying event loop to drive the set `InputHandler`.",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","smithay::backend::input","",2,{"inputs":[{"name":"winitmousebutton"}],"output":{"name":"mousebutton"}}],[11,"from","","",1,{"inputs":[{"name":"elementstate"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"elementstate"}],"output":{"name":"self"}}],[0,"drm","smithay::backend","Drm/Kms types and backend implementations",null,null],[3,"DrmBackend","smithay::backend::drm","Backend based on a `DrmDevice` and a given crtc",null,null],[3,"DrmDevice","","Representation of an open drm device node to create rendering backends",null,null],[5,"drm_device_bind","","Bind a `DrmDevice` to an EventLoop,",null,{"inputs":[{"name":"eventloophandle"},{"name":"drmdevice"},{"name":"h"}],"output":{"name":"ioresult"}}],[11,"add_connector","","Add a connector to backend",52,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"result"}}],[11,"used_connectors","","Returns the currently set connectors",52,null],[11,"remove_connector","","Removes a currently set connector",52,{"inputs":[{"name":"self"},{"name":"handle"}],"output":null}],[11,"use_mode","","Changes the currently set mode",52,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"result"}}],[11,"drop","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"set_cursor_position","","",52,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_cursor_representation","","",52,null],[11,"swap_buffers","","",52,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_proc_address","","",52,null],[11,"get_framebuffer_dimensions","","",52,null],[11,"is_current","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"make_current","","",52,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_pixel_format","","",52,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[0,"error","","",null,null],[3,"Error","smithay::backend::drm::error","The Error type.",null,null],[12,"0","","The kind of the error.",53,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",54,null],[13,"EGL","","EGL error",54,null],[13,"DrmDev","","The `DrmDevice` encountered an access error",54,null],[13,"GbmInitFailed","","Creation of gbm resource failed",54,null],[13,"FailedToSwap","","Swapping front buffers failed",54,null],[13,"ModeNotSuitable","","mode is not compatible with all given connectors",54,null],[13,"CrtcAlreadyInUse","","The given crtc is already in use by another backend",54,null],[13,"NoSuitableEncoder","","No encoder was found for a given connector on the set crtc",54,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",53,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",53,null],[11,"with_chain","","",53,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",53,null],[11,"iter","","",53,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",53,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",53,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",53,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",53,{"inputs":[{"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",53,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",53,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",53,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",53,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",53,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",53,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",53,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",54,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",54,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",54,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",54,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",53,{"inputs":[{"name":"trynewerror"}],"output":{"name":"error"}}],[8,"DrmHandler","smithay::backend::drm","Handler for drm node events",null,null],[10,"ready","","A `DrmBackend` has finished swapping buffers and new frame can now (and should be immediately) be rendered.",56,{"inputs":[{"name":"self"},{"name":"eventloophandle"},{"name":"drmdevice"},{"name":"statetoken"},{"name":"u32"},{"name":"duration"}],"output":null}],[10,"error","","The `DrmDevice` has thrown an error.",56,{"inputs":[{"name":"self"},{"name":"eventloophandle"},{"name":"drmdevice"},{"name":"ioerror"}],"output":null}],[11,"new_from_fd","","Create a new `DrmDevice` from a raw file descriptor",57,{"inputs":[{"name":"rawfd"},{"name":"l"}],"output":{"name":"result"}}],[11,"new_from_fd_with_gl_attr","","Create a new `DrmDevice` from a raw file descriptor and given `GlAttributes`",57,{"inputs":[{"name":"rawfd"},{"name":"glattributes"},{"name":"l"}],"output":{"name":"result"}}],[11,"new_from_file","","Create a new `DrmDevice` from a `File` of an open drm node",57,{"inputs":[{"name":"file"},{"name":"l"}],"output":{"name":"result"}}],[11,"new_from_file_with_gl_attr","","Create a new `DrmDevice` from a `File` of an open drm node and given `GlAttributes`",57,{"inputs":[{"name":"file"},{"name":"glattributes"},{"name":"l"}],"output":{"name":"result"}}],[11,"create_backend","","Create a new backend on a given crtc with a given `Mode` for a given amount of `connectors` (mirroring).",57,{"inputs":[{"name":"self"},{"name":"eventloophandle"},{"name":"handle"},{"name":"mode"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",57,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[0,"libinput","smithay::backend","Implementation of input backend trait for types provided by `libinput`",null,null],[3,"LibinputInputBackend","smithay::backend::libinput","Libinput based `InputBackend`.",null,null],[3,"PointerAxisEvent","","Wrapper for libinput pointer axis events to implement `backend::input::PointerAxisEvent`",null,null],[11,"new","","Initialize a new `LibinputInputBackend` from a given already initialized libinput context.",58,{"inputs":[{"name":"libinput"},{"name":"l"}],"output":{"name":"self"}}],[11,"time","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"axis","","",59,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"source","","",59,{"inputs":[{"name":"self"}],"output":{"name":"axissource"}}],[11,"amount","","",59,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_handler","","",58,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"get_handler","","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear_handler","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"input_config","","",58,null],[11,"dispatch_new_events","","",58,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","smithay::backend::input","",1,{"inputs":[{"name":"keystate"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"axis"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"axissource"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"buttonstate"}],"output":{"name":"self"}}],[0,"compositor","smithay","Utilities for handling surfaces, subsurfaces and regions",null,null],[3,"SurfaceIData","smithay::compositor","Internal implementation data of surfaces",null,null],[3,"SurfaceAttributes","","Data associated with a surface, aggreged by the handlers",null,null],[12,"buffer","","Buffer defining the contents of the surface",60,null],[12,"buffer_scale","","Scale of the contents of the buffer, for higher-resolution contents.",60,null],[12,"buffer_transform","","Transform under which interpret the contents of the buffer",60,null],[12,"opaque_region","","Region of the surface that is guaranteed to be opaque",60,null],[12,"input_region","","Region of the surface that is sensitive to user input",60,null],[12,"damage","","Damage rectangle",60,null],[12,"user_data","","User-controlled data",60,null],[3,"SubsurfaceRole","","Attributes defining the behaviour of a sub-surface relative to its parent",null,null],[12,"x","","Horizontal location of the top-left corner of this sub-surface relative to the top-left corner of its parent",61,null],[12,"y","","Vertical location of the top-left corner of this sub-surface relative to the top-left corner of its parent",61,null],[12,"sync","","Sync status of this sub-surface",61,null],[3,"RegionAttributes","","Description of the contents of a region",null,null],[12,"rects","","List of rectangle part of this region",62,null],[3,"CompositorToken","","A Compositor global token",null,null],[3,"SurfaceUserImplementation","","Sub-implementation for surface event handling",null,null],[12,"commit","","The double-buffered state has been validated by the client",63,null],[12,"frame","","The client asks to be notified when would be a good time to update the contents of this surface",63,null],[4,"TraversalAction","","Possible actions to do after handling a node diring tree traversal",null,null],[13,"DoChildren","","Traverse its children as well, providing them the data T",64,null],[13,"SkipChildren","","Skip its children",64,null],[13,"Break","","Stop traversal completely",64,null],[4,"Damage","","Description of which part of a surface should be considered damaged and needs to be redrawn",null,null],[13,"Full","","The whole surface must be considered damaged (this is the default)",65,null],[13,"Surface","","A rectangle containing the damaged zone, in surface coordinates",65,null],[13,"Buffer","","A rectangle containing the damaged zone, in buffer coordinates",65,null],[4,"RectangleKind","","Kind of a rectangle part of a region",null,null],[13,"Add","","This rectangle should be added to the region",66,null],[13,"Subtract","","The intersection of this rectangle with the region should be removed from the region",66,null],[5,"compositor_init","","Create new wl_compositor and wl_subcompositor globals.",null,null],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"surfaceidata"}}],[0,"roles","","Tools for handling surface roles",null,null],[3,"WrongRole","smithay::compositor::roles","An error type signifying that the surface does not have expected role",null,null],[8,"RoleType","","A trait representing a type that can manage surface roles",null,null],[10,"has_role","","Check if the associated surface has a role",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Role","","A trait representing the capability of a RoleType to handle a given role",null,null],[11,"set","","Set the role for the associated surface with default associated data",69,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_with","","Set the role for the associated surface with given data",69,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[10,"has","","Check if the associated surface has this role",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"data","","Access the data associated with this role if its the current one",69,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"data_mut","","Mutably access the data associated with this role if its the current one",69,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"unset","","Remove this role from the associated surface",69,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","smithay::compositor","",60,{"inputs":[],"output":{"name":"surfaceattributes"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"subsurfacerole"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"subsurfacerole"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"rectanglekind"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"regionattributes"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"regionattributes"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"compositortoken"}}],[11,"with_surface_data","","Access the data of a surface",71,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"f"}],"output":{"name":"t"}}],[11,"with_surface_tree_upward","","Access the data of a surface tree from bottom to top",71,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"t"},{"name":"f"}],"output":{"name":"result"}}],[11,"with_surface_tree_downward","","Access the data of a surface tree from top to bottom",71,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"t"},{"name":"f"}],"output":{"name":"result"}}],[11,"get_parent","","Retrieve the parent of this surface",71,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"option"}}],[11,"get_children","","Retrieve the children of this surface",71,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"vec"}}],[11,"has_a_role","","Check wether this surface as a role or not",71,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"bool"}}],[11,"has_role","","Check wether this surface as a specific role",71,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"bool"}}],[11,"give_role","","Register that this surface has given role with default data",71,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"result"}}],[11,"give_role_with","","Register that this surface has given role with given data",71,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"roledata"}],"output":{"name":"result"}}],[11,"with_role_data","","Access the role data of a surface",71,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"f"}],"output":{"name":"result"}}],[11,"remove_role","","Register that this surface does not have a role any longer and retrieve the data",71,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"result"}}],[11,"get_region_attributes","","Retrieve the metadata associated with a wl_region",71,{"inputs":[{"name":"self"},{"name":"wlregion"}],"output":{"name":"regionattributes"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"surfaceuserimplementation"}}],[0,"shm","smithay","SHM handling helpers",null,null],[3,"ShmGlobalData","smithay::shm","Internal data storage of ShmGlobal",null,null],[3,"BufferData","","Details of the contents of a buffer relative to its pool",null,null],[12,"offset","","Offset of the start of the buffer relative to the beginning of the pool in bytes",72,null],[12,"width","","Wwidth of the buffer in bytes",72,null],[12,"height","","Height of the buffer in bytes",72,null],[12,"stride","","Stride of the buffer in bytes",72,null],[12,"format","","Format used by this buffer",72,null],[4,"BufferAccessError","","Error that can occur when accessing an SHM buffer",null,null],[13,"NotManaged","","This buffer is not managed by the SHM handler",73,null],[13,"BadMap","","An error occured while accessing the memory map",73,null],[5,"init_shm_global","","Create a new SHM global advertizing given supported formats.",null,{"inputs":[{"name":"eventloop"},{"name":"vec"},{"name":"l"}],"output":{"name":"global"}}],[5,"with_buffer_contents","","Call given closure with the contents of the given buffer",null,{"inputs":[{"name":"wlbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"shmglobaldata"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bufferdata"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"seat","smithay","Seat global utilities",null,null],[3,"KeyboardHandle","smithay::seat","An handle to a keyboard handler",null,null],[3,"PointerHandle","","An handle to a keyboard handler",null,null],[3,"Seat","","Internal data of a seat global",null,null],[4,"KeyboardError","","Errors that can be encountered when creating a keyboard handler",null,null],[13,"BadKeymap","","libxkbcommon could not load the specified keymap",75,null],[13,"IoError","","Smithay could not create a tempfile to share the keymap with clients",75,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"keyboardhandle"}}],[11,"input","","Handle a keystroke",76,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"keystate"},{"name":"u32"},{"name":"f"}],"output":null}],[11,"set_focus","","Set the current focus of this keyboard",76,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"}],"output":null}],[11,"change_repeat_info","","Change the repeat info configured for this keyboard",76,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"pointerhandle"}}],[11,"motion","","Notify that the pointer moved",77,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"button","","Notify that a button was pressed",77,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"buttonstate"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"new","","Create a new seat global",78,null],[11,"add_pointer","","Adds the pointer capability to this seat",78,{"inputs":[{"name":"self"}],"output":{"name":"pointerhandle"}}],[11,"remove_pointer","","Remove the pointer capability from this seat",78,{"inputs":[{"name":"self"}],"output":null}],[11,"add_keyboard","","Adds the keyboard capability to this seat",78,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"option"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"remove_keyboard","","Remove the keyboard capability from this seat",78,{"inputs":[{"name":"self"}],"output":null}],[11,"cleanup","","Cleanup internal states from old resources",78,{"inputs":[{"name":"self"}],"output":null}],[0,"shell","smithay","Utilities for handling shell surfaces, toplevel and popups",null,null],[3,"ShellSurfaceRole","smithay::shell","Metadata associated with the `shell_surface` role",null,null],[12,"pending_state","","Pending state as requested by the client",79,null],[12,"window_geometry","","Geometry of the surface",79,null],[12,"pending_configures","","List of non-acked configures pending",79,null],[12,"configured","","Has this surface acked at least one configure?",79,null],[3,"PositionerState","","The state of a positioner, as set by the client",null,null],[12,"rect_size","","Size of the rectangle that needs to be positioned",80,null],[12,"anchor_rect","","Anchor rectangle in the parent surface coordinates relative to which the surface must be positioned",80,null],[12,"anchor_edges","","Edges defining the anchor point",80,null],[12,"gravity","","Gravity direction for positioning the child surface relative to its anchor point",80,null],[12,"constraint_adjustment","","Adjustments to do if previous criterias constraint the surface",80,null],[12,"offset","","Offset placement relative to the anchor point",80,null],[3,"ToplevelState","","State of a regular toplevel surface",null,null],[12,"parent","","Parent of this surface",81,null],[12,"title","","Title of this shell surface",81,null],[12,"app_id","","App id for this shell surface",81,null],[12,"min_size","","Minimum size requested for this surface",81,null],[12,"max_size","","Maximum size requested for this surface",81,null],[3,"PopupState","","The pending state of a popup surface",null,null],[12,"parent","","Parent of this popup surface",82,null],[12,"positioner","","The positioner specifying how this tooltip should be placed relative to its parent.",82,null],[3,"ShellSurfaceIData","","Internal implementation data of shell surfaces",null,null],[3,"ShellState","","Shell global state",null,null],[3,"ShellClient","","A shell client",null,null],[3,"ToplevelSurface","","A handle to a toplevel surface",null,null],[3,"PopupSurface","","A handle to a popup surface",null,null],[3,"ToplevelConfigure","","A configure message for toplevel surfaces",null,null],[12,"size","","A suggestion for a new size for the surface",83,null],[12,"states","","A notification of what are the current states of this surface",83,null],[12,"serial","","A serial number to track ACK from the client",83,null],[3,"PopupConfigure","","A configure message for popup surface",null,null],[12,"position","","The position chosen for this popup relative to its parent",84,null],[12,"size","","A suggested size for the popup",84,null],[12,"serial","","A serial number to track ACK from the client",84,null],[3,"ShellSurfaceUserImplementation","","A sub-implementation for the shell",null,null],[12,"new_client","","A new shell client was instanciated",85,null],[12,"client_pong","","The pong for a pending ping of this shell client was received",85,null],[12,"new_toplevel","","A new toplevel surface was created",85,null],[12,"new_popup","","A new popup surface was created",85,null],[12,"move_","","The client requested the start of an interactive move for this surface",85,null],[12,"resize","","The client requested the start of an interactive resize for this surface",85,null],[12,"grab","","This popup requests a grab of the pointer",85,null],[12,"change_display_state","","A toplevel surface requested its display state to be changed",85,null],[12,"show_window_menu","","The client requests the window menu to be displayed on this surface at this location",85,null],[4,"ShellSurfacePendingState","","Contents of the pending state of a shell surface, depending on its role",null,null],[13,"Toplevel","","This a regular, toplevel surface",86,null],[13,"Popup","","This is a popup surface",86,null],[13,"None","","This surface was not yet assigned a kind",86,null],[5,"shell_init","","Create new xdg_shell and wl_shell globals.",null,null],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"positionerstate"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Clone this ToplevelState",81,{"inputs":[{"name":"self"}],"output":{"name":"toplevelstate"}}],[11,"clone","","Clone this PopupState",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"shellsurfacependingstate"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"shellsurfaceidata"}}],[11,"cleanup_surfaces","","Cleans the internal surface storage by removing all dead surfaces",88,{"inputs":[{"name":"self"}],"output":null}],[11,"toplevel_surfaces","","Access all the shell surfaces known by this handler",88,null],[11,"popup_surfaces","","Access all the popup surfaces known by this handler",88,null],[11,"alive","","Is the shell client represented by this handle still connected?",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"equals","","Checks if this handle and the other one actually refer to the same shell client",89,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"send_ping","","Send a ping request to this shell client",89,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"with_data","","Access the user data associated with this shell client",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"alive","","Is the toplevel surface refered by this handle still alive?",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"equals","","Do this handle and the other one actually refer to the same toplevel surface?",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"client","","Retrieve the shell client owning this toplevel surface",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_configure","","Send a configure event to this toplevel surface to suggest it a new configuration",90,{"inputs":[{"name":"self"},{"name":"toplevelconfigure"}],"output":{"name":"eventresult"}}],[11,"ensure_configured","","Make sure this surface was configured",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_surface","","Access the underlying `wl_surface` of this toplevel surface",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_pending_state","","Retrieve a copy of the pending state of this toplevel surface",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"alive","","Is the popup surface refered by this handle still alive?",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"equals","","Do this handle and the other one actually refer to the same popup surface?",91,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"client","","Retrieve the shell client owning this popup surface",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_configure","","Send a configure event to this toplevel surface to suggest it a new configuration",91,{"inputs":[{"name":"self"},{"name":"popupconfigure"}],"output":{"name":"eventresult"}}],[11,"ensure_configured","","Make sure this surface was configured",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"send_popup_done","","Send a 'popup_done' event to the popup surface",91,{"inputs":[{"name":"self"}],"output":{"name":"eventresult"}}],[11,"get_surface","","Access the underlying `wl_surface` of this toplevel surface",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_pending_state","","Retrieve a copy of the pending state of this popup surface",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"shellsurfaceuserimplementation"}}],[0,"utils","smithay","Various utilities functions and types",null,null],[3,"Rectangle","smithay::utils","A rectangle defined by its top-left corner and dimensions",null,null],[12,"x","","horizontal position of the top-leftcorner of the rectangle, in surface coordinates",92,null],[12,"y","","vertical position of the top-leftcorner of the rectangle, in surface coordinates",92,null],[12,"width","","width of the rectangle",92,null],[12,"height","","height of the rectangle",92,null],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Checks wether given point is inside a rectangle",92,null],[14,"define_roles","smithay","",null,null]],"paths":[[3,"SeatCapabilities"],[4,"KeyState"],[4,"MouseButton"],[4,"MouseButtonState"],[4,"Axis"],[4,"AxisSource"],[8,"Event"],[8,"KeyboardKeyEvent"],[8,"PointerButtonEvent"],[8,"PointerAxisEvent"],[8,"PointerMotionEvent"],[8,"PointerMotionAbsoluteEvent"],[8,"TouchDownEvent"],[8,"TouchMotionEvent"],[8,"TouchUpEvent"],[8,"TouchCancelEvent"],[8,"InputBackend"],[8,"InputHandler"],[3,"Seat"],[4,"UnusedEvent"],[3,"TouchSlot"],[8,"CpuGraphicsBackend"],[3,"Error"],[3,"GlAttributes"],[3,"PixelFormatRequirements"],[3,"PixelFormat"],[4,"NativeSurfacePtr"],[4,"NativeType"],[4,"ErrorKind"],[4,"SwapBuffersError"],[4,"GlProfile"],[8,"ResultExt"],[8,"NativeSurface"],[8,"EGLGraphicsBackend"],[3,"EGLContext"],[3,"EGLSurface"],[3,"GliumGraphicsBackend"],[8,"GraphicsBackend"],[3,"Error"],[4,"ErrorKind"],[4,"WinitInputError"],[8,"ResultExt"],[3,"WinitGraphicsBackend"],[3,"WinitKeyboardInputEvent"],[3,"WinitMouseMovedEvent"],[3,"WinitMouseWheelEvent"],[3,"WinitMouseInputEvent"],[3,"WinitTouchStartedEvent"],[3,"WinitTouchMovedEvent"],[3,"WinitTouchEndedEvent"],[3,"WinitTouchCancelledEvent"],[3,"WinitInputBackend"],[3,"DrmBackend"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"DrmHandler"],[3,"DrmDevice"],[3,"LibinputInputBackend"],[3,"PointerAxisEvent"],[3,"SurfaceAttributes"],[3,"SubsurfaceRole"],[3,"RegionAttributes"],[3,"SurfaceUserImplementation"],[4,"TraversalAction"],[4,"Damage"],[4,"RectangleKind"],[3,"SurfaceIData"],[8,"RoleType"],[8,"Role"],[3,"WrongRole"],[3,"CompositorToken"],[3,"BufferData"],[4,"BufferAccessError"],[3,"ShmGlobalData"],[4,"KeyboardError"],[3,"KeyboardHandle"],[3,"PointerHandle"],[3,"Seat"],[3,"ShellSurfaceRole"],[3,"PositionerState"],[3,"ToplevelState"],[3,"PopupState"],[3,"ToplevelConfigure"],[3,"PopupConfigure"],[3,"ShellSurfaceUserImplementation"],[4,"ShellSurfacePendingState"],[3,"ShellSurfaceIData"],[3,"ShellState"],[3,"ShellClient"],[3,"ToplevelSurface"],[3,"PopupSurface"],[3,"Rectangle"]]};
initSearch(searchIndex);
